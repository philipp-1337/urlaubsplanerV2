rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Bestehende Regeln für das alte Modell (users) ---
    // Alle Anwendungsdaten liegen unter der Kollektion "users",
    // wobei jedes Dokument durch die eindeutige UID des Benutzers identifiziert wird.
    // Dies stellt sicher, dass die Daten jedes Benutzers streng von anderen getrennt sind.
    match /users/{userId} {

      // Subkollektion: persons
      // Speichert die Liste der Mitarbeiter/Personen, die vom Benutzer verwaltet werden.
      match /persons/{personId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Subkollektion: resturlaubData
      // Speichert den Resturlaub aus dem Vorjahr für eine bestimmte Person und ein bestimmtes Jahr.
      // Die Dokument-ID ist typischerweise eine Kombination wie "{personId}_{year}".
      match /resturlaubData/{resturlaubId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        // Validierung: Stellt sicher, dass 'tage' eine nicht-negative Ganzzahl ist.
        allow update, create: if request.resource.data.tage is int && request.resource.data.tage >= 0;
      }

      // Subkollektion: employmentData
      // Speichert die Anstellungsart (Voll-/Teilzeit) für eine Person und ein Jahr.
      // Die Dokument-ID ist typischerweise "{personId}_{year}".
      match /employmentData/{employmentId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        // Validierung: Stellt sicher, dass 'percentage' zwischen 0-100 liegt und 'type' ein gültiger Wert ist.
        allow update, create: if
          (request.resource.data.percentage is int && request.resource.data.percentage >= 0 && request.resource.data.percentage <= 100) &&
          (request.resource.data.type == 'full-time' || request.resource.data.type == 'part-time');
      }

      // Subkollektion: yearConfigurations
      // Speichert globale Einstellungen pro Jahr, wie z.B. den allgemeinen Urlaubsanspruch.
      // Die Dokument-ID ist das Jahr selbst (z.B. "2024").
      match /yearConfigurations/{yearId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        // Validierung: Stellt sicher, dass 'urlaubsanspruch' eine nicht-negative Ganzzahl ist.
        allow update, create: if request.resource.data.urlaubsanspruch is int && request.resource.data.urlaubsanspruch >= 0;
      }

      // Subkollektion: dayStatusEntries
      // Speichert alle individuellen Tagesstatus (Urlaub, Durchführung, etc.) sowie globale Einträge (Feiertage).
      // Die Dokument-ID ist eine Kombination aus Person/Global-Marker und Datum.
      match /dayStatusEntries/{entryId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        // Validierung: Stellt sicher, dass die notwendigen Felder mit den korrekten Datentypen vorhanden sind.
        allow update, create: if
          request.resource.data.year is int &&
          request.resource.data.month is int &&
          request.resource.data.day is int &&
          request.resource.data.status is string &&
          request.resource.data.personId is string;
      }
    }

    // --- Neue Regeln für das Multi-Tenant-Modell (tenants) ---
    // Private Userdaten (Mapping tenantId/personId/role)
    match /users/{userId}/privateInfo/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Mandantenstruktur
    match /tenants/{tenantId}/{document=**} {
      allow read: if isMemberOf(tenantId);
      allow write: if isAdminOf(tenantId);
    }

    // Personenverwaltung
    match /tenants/{tenantId}/persons/{personId} {
      allow create, delete: if isAdminOf(tenantId);
      allow update: if isAdminOf(tenantId) ||
        (isMemberOf(tenantId) && resource.data.userId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']));
    }

    // Tagesstatus-Einträge
    match /tenants/{tenantId}/dayStatusEntries/{entryId} {
      allow write: if isAdminOf(tenantId) ||
        (isMemberOf(tenantId) && request.resource.data.personId == getPersonIdByUserId(request.auth.uid));
    }

    // Jahrkonfigurationen
    match /tenants/{tenantId}/yearConfigurations/{yearId} {
      allow write: if isAdminOf(tenantId);
    }
    match /tenants/{tenantId}/resturlaubData/{resturlaubId} {
      allow write: if isAdminOf(tenantId);
    }
    match /tenants/{tenantId}/employmentData/{employmentId} {
      allow write: if isAdminOf(tenantId);
    }

    // Hilfsfunktionen
    function isMemberOf(tenantId) {
      // Prüft, ob der eingeloggte User als Person im Tenant eingetragen ist
      return exists(/databases/$(database)/documents/tenants/$(tenantId)/persons/$(getPersonIdByUserId(request.auth.uid)));
    }
    function isAdminOf(tenantId) {
      // Prüft, ob die Rolle im persons-Dokument "admin" ist
      return get(/databases/$(database)/documents/tenants/$(tenantId)/persons/$(getPersonIdByUserId(request.auth.uid))).data.role == 'admin';
    }
    function getPersonIdByUserId(userId) {
      // Sucht das persons-Dokument mit passender userId (vereinfachte Annahme: personId == userId)
      return userId;
    }
  }
}